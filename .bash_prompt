# Shell prompt based on the Solarized Dark theme.
# Screenshot: http://i.imgur.com/EkEtphC.png
# Heavily inspired by @necolas’s prompt: https://github.com/necolas/dotfiles
# iTerm → Profiles → Text → use 13pt Monaco with 1.1 vertical spacing.

# if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
#     export TERM='gnome-256color';
# elif infocmp xterm-256color >/dev/null 2>&1; then
#     export TERM='xterm-256color';
# fi;

# prompt_git() {
#     local s='';
#     local branchName='';

#     # Check if the current directory is in a Git repository.
#     if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

#         # check if the current directory is in .git before running git checks
#         if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

#             # Ensure the index is up to date.
#             git update-index --really-refresh -q &>/dev/null;

#             # Check for uncommitted changes in the index.
#             if ! $(git diff --quiet --ignore-submodules --cached); then
#                 s+='+';
#             fi;

#             # Check for unstaged changes.
#             if ! $(git diff-files --quiet --ignore-submodules --); then
#                 s+='!';
#             fi;

#             # Check for untracked files.
#             if [ -n "$(git ls-files --others --exclude-standard)" ]; then
#                 s+='?';
#             fi;

#             # Check for stashed files.
#             if $(git rev-parse --verify refs/stash &>/dev/null); then
#                 s+='$';
#             fi;

#         fi;

#         # Get the short symbolic ref.
#         # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
#         # Otherwise, just give up.
#         branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
#             git rev-parse --short HEAD 2> /dev/null || \
#             echo '(unknown)')";

#         [ -n "${s}" ] && s=" [${s}]";

#         echo -e "${1}${branchName}${blue}${s}";
#     else
#         return;
#     fi;
# }

# if tput setaf 1 &> /dev/null; then
#     tput sgr0; # reset colors
#     bold=$(tput bold);
#     reset=$(tput sgr0);
#     # Solarized colors, taken from http://git.io/solarized-colors.
#     black=$(tput setaf 0);
#     blue=$(tput setaf 33);
#     cyan=$(tput setaf 37);
#     green=$(tput setaf 64);
#     orange=$(tput setaf 166);
#     purple=$(tput setaf 125);
#     red=$(tput setaf 124);
#     violet=$(tput setaf 61);
#     white=$(tput setaf 15);
#     yellow=$(tput setaf 136);
# else
#     bold='';
#     reset="\e[0m";
#     black="\e[1;30m";
#     blue="\e[1;34m";
#     cyan="\e[1;36m";
#     green="\e[1;32m";
#     orange="\e[1;33m";
#     purple="\e[1;35m";
#     red="\e[1;31m";
#     violet="\e[1;35m";
#     white="\e[1;37m";
#     yellow="\e[1;33m";
# fi;

# # Highlight the user name when logged in as root.
# if [[ "${USER}" == "root" ]]; then
#     userStyle="${red}";
# else
#     userStyle="${orange}";
# fi;

# # Highlight the hostname when connected via SSH.
# if [[ "${SSH_TTY}" ]]; then
#     hostStyle="${bold}${red}";
# else
#     hostStyle="${yellow}";
# fi;

# # Set the terminal title to the current working directory.
# PS1="\[\033]0;\w\007\]";
# PS1+="\[${bold}\]\n"; # newline
# PS1+="\[${userStyle}\]\u"; # username
# PS1+="\[${white}\] at ";
# PS1+="\[${hostStyle}\]\h"; # host
# PS1+="\[${white}\] in ";
# PS1+="\[${green}\]\w"; # working directory
# PS1+="\$(prompt_git \"${white} on ${violet}\")"; # Git repository details
# PS1+="\n";
# PS1+="\[${white}\]\$ \[${reset}\]"; # `$` (and reset color)
# export PS1;

# PS2="\[${yellow}\]→ \[${reset}\]";
# export PS2;

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then export TERM=gnome-256color
elif infocmp xterm-256color >/dev/null 2>&1; then export TERM=xterm-256color
fi

if tput setaf 1 &> /dev/null; then
    tput sgr0
    if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
      GREY="\033[30m"
      GREY2="\033[40m\033[1;37m"
      WHITE="\033[m"

      RED="\033[31m"
      RED2="\033[1;31m"

      GREEN="\033[32m"
      GREEN2="\033[1;32m"
      GREEN3="\033[42m\033[1;37m"

      YELLOW="\033[33m"
      YELLOW2="\033[1;33m"

      BLUE="\033[34m"
      BLUE2="\033[1;34m"

      PURPLE="\033[35m"
      PURPLE2="\033[1;35m"
      PURPLE3="\033[45m\033[1;37m"

      TEAL="\033[34m"
      TEAL2="\033[1;34m"
      TEAL3="\033[44m\033[1;37m"

    else
      MAGENTA=$(tput setaf 5)
      ORANGE=$(tput setaf 4)
      GREEN=$(tput setaf 2)
      PURPLE=$(tput setaf 1)
      WHITE=$(tput setaf 7)
      BLUE=$(tput setaf 44)
    fi
    BOLD=$(tput bold)
    RESET=$(tput sgr0)
else
    MAGENTA="\033[1;31m"
    ORANGE="\033[1;33m"
    GREEN="\033[1;32m"
    PURPLE="\033[1;35m"
    WHITE="\033[1;37m"
    BOLD=""
    RESET="\033[m"
fi

parse_git_dirty () {
  [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit, working directory clean" ]] && echo " ✘"
}
parse_git_branch () {
  gitinfo=$(git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1$(parse_git_dirty)/")
  if [ -n "$gitinfo" ]; then
    echo -e $RESET$PURPLE3 $gitinfo
  fi
}
parse_drupal_site (){
  echo '$(__drush_ps1 "[%s]")'
}

PS1="$RESET$TEAL3 \w $RESET\$(parse_git_branch) $RESET \n$GREEN3->$RESET "
PS2="$RESET$TEAL2->$RESET"
